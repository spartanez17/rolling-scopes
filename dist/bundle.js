!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},i.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);class n{constructor(){}create(){let e=document.createElement("div");return e.innerHTML='\n            <header class="searchbox-wrapper control-width">\n                <form class="search-form" >\n                    <input id="input-line" class="search-input" type="text" placeholder="...Input text" name="search">\n                    <button id="search" data-input-button="search" type="submit">\n                    <i class="fa fa-search" data-input-button="search"></i>Search\n                    </button>\n                </form>\n            </header>   \n        ',e.firstElementChild}transform(){let e=document.getElementById("search");"search"===e.dataset.inputButton?(e.dataset.inputButton="clear",e.innerHTML='<i class="fa fa-trash-o aria-hidden="true" data-input-button="clear"></i>Clear'):(e.dataset.inputButton="search",e.innerHTML='<i class="fa fa-search aria-hidden="true" data-input-button="search"></i>Search')}}class s{constructor(){}create(){let e=document.createElement("div");return e.innerHTML='<main id="video-cont" class="videos-cont control-width">\n                                        <ul id="video-list" class="videos-list"></ul>\n                                    </main>',e.firstElementChild}addVideos(e){let t=e.items,i=document.getElementById("video-list");return t.forEach(e=>{i.innerHTML+=function(e){let t=document.createElement("div");return t.innerHTML+=`\n                <li id="${e.id.videoId}" class="videos-item" data-active="video-item">\n                    <div class="video-image-wr">\n                    <img src="${e.snippet.thumbnails.high.url}"\n                        alt="Youtube Image Preview">    \n                    </div>\n                    <div class="video-info" >\n                    <h3>${e.snippet.title}</h3>\n                    <p><i class="fa fa-user-circle-o" aria-hidden="true"></i>${e.snippet.channelTitle}</p>\n                    <ul>\n                        <li>${new Date(e.snippet.publishedAt).toLocaleString()}</li>\n                    </ul>\n                    </div>\n                </li>`,t.firstElementChild}(e).outerHTML}),i.firstElementChild}clear(){document.getElementById("video-list").innerHTML=""}}class a{constructor(){}create(){let e=document.createElement("div");return e.innerHTML='\n        <section id="loader" class="loader">\n          <div class="animation-cont control-width">\n            <div class="animation-item">\n                <i></i>\n            </div>\n            <div class="animation-item">\n                <i></i>\n            </div>\n            <div class="animation-item">\n                <i></i>\n            </div>\n            <div class="animation-item">\n                <i></i>\n            </div>\n            <div class="animation-item">\n                <i></i>\n            </div>\n          </div>\n        </section>',e.firstElementChild}show(){document.getElementById("loader").style.display="block"}hide(){document.getElementById("loader").style.display="none"}}function r(e,t,i){let n=e.split(" ").filter(e=>!!e).join("+"),s="";return i&&(s="pageToken="+i+"&"),`https://www.googleapis.com/youtube/v3/search?${s}part=snippet&type=video&maxResults=15&order=relevance&q=${n}&key=${t}`}const o=async e=>{try{return(await fetch(e)).json()}catch(e){throw new Error("There is no internet connection")}};class l{constructor(){}create(){let e=document.createElement("div");return e.innerHTML='<div id="modal" class="modal" style="display: none">\n            <div id="modal-cont" class="modal-dialog">\n            <div class="modal-content"> \n                <div class="modal-header">\n                <button id="close" type="button" class="close" data-dismiss="modal-close">\n                    <i class="fa fa-times" aria-hidden="true" data-dismiss="modal-close"></i>\n                </button>\n                </div>\n                <div id="frame" class="modal-body vertical-padding">\n                </div>\n            </div>\n            </div>\n        </div>',e.firstElementChild}async viewModal(e,t){let i=document.getElementById("modal");i.style.display="block",i.querySelector("#frame").innerHTML+=`<iframe id="player"\n                type="text/html"\n                allowFullscreen="true"\n                src="http://www.youtube.com/embed/${e}?enablejsapi=1frameborder="0"">\n            </iframe>`;let n=function(e,t){return`https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${e}&key=${t}`}(e,t);await o(n).then(e=>{let t=e.items[0];i.querySelector("#modal-cont").innerHTML+=`\n                <div id="description" class="modal-footer">\n                    <div class="small-info">\n                    <ul class="info-container">\n                        <li class="title vertical-padding">${t.snippet.title}</li>\n                        <li class="channel vertical-padding"><i class="fa fa-user-circle-o" aria-hidden="true"></i>${t.snippet.channelTitle}</li>\n                    </ul>\n                    <ul class="info-container rats">\n                        <li class="rating views vertical-padding"><i class="fa fa-eye" aria-hidden="true"></i> ${t.statistics.viewCount}</li>\n                        <li class="rating like vertical-padding"><i class="fa fa-thumbs-up" aria-hidden="true"></i> ${t.statistics.likeCount}</li>\n                        <li class="rating dislike vertical-padding">${t.statistics.dislikeCount}</li>\n                    </ul>\n                    </div>\n                    <p class="description">${t.snippet.description}</p>\n                </div>`}).catch(e=>console.log(e.message))}closeModal(){let e=document.getElementById("modal");e.style.display="none";let t=e.querySelector("#frame");t.removeChild(t.lastChild);let i=e.querySelector("#modal-cont");i.removeChild(i.lastChild)}}class d{constructor(){}create(){let e=document.createElement("div");return e.innerHTML="<div id='oops' class='oops'></div>",e.firstElementChild}showError(e){document.getElementById("oops").innerHTML=e}}(new class{constructor(){this.key="AIzaSyDMS7J8iuz2KJ4CFsHL3Mkobc6MdoLvV5w",this.currSearchQuery,this.currentResponseObj={},this.isLoading=!1,this.searchBox=new n,this.videosContainer=new s,this.spinner=new a,this.videoModal=new l,this.requestError=new d}start(){let e=document.querySelector(".main-container");e.appendChild(this.searchBox.create()),e.appendChild(this.videosContainer.create()),e.appendChild(this.requestError.create()),e.appendChild(this.videoModal.create()),e.appendChild(this.spinner.create()),document.addEventListener("scroll",async e=>{let t=e.target.documentElement;if(t.clientHeight+t.scrollTop==t.scrollHeight)if(this.isLoading)this.spinner.show();else{this.videosContainer.addVideos(this.currentResponseObj),this.spinner.hide();let e=r(this.currSearchQuery,this.key,this.currentResponseObj.nextPageToken);this.isLoading=!0,await o(e).then(e=>{this.currentResponseObj=e,this.isLoading=!1,document.dispatchEvent(new Event("scroll"))}).catch(e=>this.requestError.showError(e.message))}}),document.getElementById("search").addEventListener("click",async e=>{if(e.preventDefault(),"search"===e.target.dataset.inputButton){let e=document.getElementById("input-line").value;if(e){this.currSearchQuery=e;let t=r(this.currSearchQuery,this.key);this.spinner.show();try{let e=await o(t);if(0===e.pageInfo.totalResults)throw new Error("Even YouTube doesn't know what you want :(");this.currentResponseObj=e,this.videosContainer.addVideos(this.currentResponseObj),this.searchBox.transform()}catch(e){this.requestError.showError(e),this.spinner.hide()}this.spinner.hide(),t=r(this.currSearchQuery,this.key,this.currentResponseObj.nextPageToken),this.isLoading=!0;try{let e=await o(t);this.isLoading=!1,this.currentResponseObj=e}catch(e){this.requestError.showError(e)}}}}),document.body.addEventListener("click",e=>{let t=e.target;console.log("doc"),"video-item"===t.dataset.active?(r(t.id,this.key),this.videoModal.viewModal(t.id,this.key)):"modal-close"===t.dataset.dismiss?this.videoModal.closeModal():"clear"===t.dataset.inputButton?(console.log("clear work"),this.videosContainer.clear(),this.searchBox.transform()):t.parentElement.dispatchEvent(new Event("click",{bubbles:!0,cancelable:!0}))},!0)}}).start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,